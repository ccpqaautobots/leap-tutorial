<!DOCTYPE html>
<html>

<head>
    <% include ../partials/shared/head %>
        <link href="/css/plugins/awesome-bootstrap-checkbox/awesome-bootstrap-checkbox.css" rel="stylesheet" >
        <link href="/css/plugins/daterangepicker/daterangepicker.css" rel="stylesheet">
        <script src="/js/plugins/moment/moment.min.js" type="text/javascript"></script>
        <script src="/js/plugins/daterangepicker/daterangepicker.js" type="text/javascript"></script>
        <style>
            #pages-view .ul-header {
                padding-left: 10px;
            }
            
            #pages-view .ul-header:hover {
                background-color: lightgray;
            }
            
            #pages-view li {
                margin-left: 40px;
                padding-left: 10px;
            }
            
            #pages-view li:hover {
                background-color: lightgray;
            }
            
            .dropdown-submenu {
                position: relative;
            }
            
            .dropdown-submenu>.dropdown-menu {
                top: 0;
                left: 100%;
                margin-top: -6px;
                margin-left: -1px;
                -webkit-border-radius: 0 6px 6px 6px;
                -moz-border-radius: 0 6px 6px;
                border-radius: 0 6px 6px 6px;
            }
            
            .dropdown-submenu:hover>.dropdown-menu {
                display: block;
            }
            
            .caret-right {
                display: inline-block;
                float: right;
                width: 0;
                height: 0;
                margin-left: 2px;
                vertical-align: middle;
                border-left: 5px solid;
                border-left-color: #999999;
                border-bottom: 5px solid transparent;
                border-top: 5px solid transparent;
                margin-top: 5px;
                margin-right: -8px;
            }

            .center {
                text-align: center !important;
                vertical-align: middle !important;
            }

            .wide {
                width : 100% !important;
            }
        </style>
</head>

<body>
    <div id="wrapper">
        <% include ../partials/shared/sidebar %>

            <div id="page-wrapper" class="gray-bg dashbard-1">
                <div class="row border-bottom">
                    <% include ../partials/shared/header %>
                </div>
                <div class="row wrapper border-bottom white-bg page-heading">
                    <div class="col-lg-10">
                        <h2>Object Repository</h2>
                        <ol class="breadcrumb">
                            <li>
                                <a href="/">Home</a>
                            </li>
                            <li>
                                <a href="/pages">Object Repositories</a>
                            </li>
                            <li class="active">
                                <strong><%= project.name %></strong>
                            </li>
                        </ol>
                    </div>
                    <div class="col-lg-2"></div>
                </div>
                <div id="wrapper-content" class="wrapper wrapper-content">
                    <div class="row">
                        <div class="col-xs-5 col-md-5 col-lg-4">
                            <div class="ibox">
                                <div class="ibox-title">
                                    <h5>Object Repository</h5>
                                    <div class="ibox-tools">
                                        <a href="#" class="dropdown-toggle" data-toggle="dropdown">
                                            <i class="fa fa-wrench"></i>
                                        </a>
                                        <ul class="dropdown-menu" role="menu">
                                            <li><a href="#" data-bind="click: $root.filterOptions"><i class="fa fa-filter"></i>&nbsp;&nbsp;&nbsp;Filter options</a></li>
                                            <li><a href="#" data-bind="click: $root.expandAll"><i class="fa fa-expand"></i>&nbsp;&nbsp;&nbsp;Expand All</a></li>
                                            <li><a href="#" data-bind="click: $root.collapseAll"><i class="fa fa-compress"></i>&nbsp;&nbsp;&nbsp;Collapse All</a></li>
                                        </ul>
                                    </div>
                                </div>
                                <div class="ibox-content">
                                    <div data-bind="visible: filter" style="padding: 10px">
                                        <button type="button" data-bind="click: $root.filterPages" class="btn btn-primary pull-right">Search</button>
                                        <button type="button" data-bind="click: $root.clearFilter" class="btn btn-warning pull-right">Clear filter</button>
                                        <br />
                                        <label for="subproject" class="control-label">Sub project</label>
                                        <select name="subproject" class="form-control" data-bind="options: subProjects, value: selectedSubProject"></select>
                                        <label for="author" class="control-label">Author</label>
                                        <select name="author" class="form-control" data-bind="options: authors, value: selectedAuthor"></select>
                                        <label for="type" class="control-label">Type</label>
                                        <select name="type" class="form-control" data-bind="options: types, value: selectedType"></select>
                                        <label for="updatedby" class="control-label">Updated by</label>
                                        <select name="updatedby" class="form-control" data-bind="options: updatedBys, value: selectedUpdatedBy"></select>
                                        <div class="input-group">
                                            <button type="button" class="btn btn-default" data-bind="datePicker" data-picker-date="Created" data-picker-observable="createdDateRange">
                                                        <span>Filter by created date</span>
                                                        <i class="fa fa-caret-down"></i>
                                                    </button>
                                            <button type="button" class="btn btn-default" data-bind="datePicker" data-picker-date="Updated" data-picker-observable="updatedDateRange">
                                                        <span>Filter by updated date</span>
                                                        <i class="fa fa-caret-down"></i>
                                                    </button>
                                        </div>
                                    </div>
                                    <div id="pages-view" data-bind="foreach: pages, defaultContextMenu" class="box-body table-responsive" style="min-height: 100vh; max-height: 100vh; overflow-y: scroll;">
                                        <div data-bind="pageContextMenu: { index: $index }, click: function() { $root.showPageData($index) }" class="ul-header" style="cursor: pointer;"><i class="fa fa-caret-down" data-bind="collapsible"></i>&nbsp;&nbsp;<i class="fa fa-newspaper-o"></i>&nbsp;&nbsp;
                                            <label data-bind="text: name(), attr: { style: (edited()) ? 'color:red; cursor: pointer;' : 'color:black; cursor: pointer;' }"></label>
                                        </div>
                                        <ul data-bind="foreach: elements" class="list-unstyled" style="display: none;">
                                            <li data-bind="elementContextMenu: { page: $parent, element: $data, index: $index }, click: function() { $root.showElementData($parent, $index) }"
                                                style="cursor: pointer;"><i data-bind="attr: { class: 'fa fa-' + $root.getIcon($data) }"></i>&nbsp;&nbsp;
                                                <label data-bind="text: name(), attr: { style: (edited()) ? 'color:red; cursor: pointer;' : 'color:black; cursor: pointer;' }"></label>
                                            </li>
                                        </ul>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="col-xs-7 col-md-7 col-lg-8">
                            <div class="ibox">
                                <div class="ibox-title" data-bind="with: ($root.addingPage()) ? newPage : selectedPage">
                                    <h5 data-bind='html: ($root.displayPageElement()) ? 
                                        ($root.addingPage()) ? 
                                            "Creating new page : " + $root.newPage().name() : 
                                            "Page : " + $root.selectedPage().name() 

                                        : ($root.addingObject()) ?
                                            "Creating new element : " + $root.selectedPage().newObject().name() :
                                            "Element : " + $root.selectedPage().selectedElement().name()'></h5>
                                </div>
                                <div class="ibox-content">
                                    <div data-bind="with: ($root.addingPage()) ? 
                                                    newPage : 
                                                    selectedPage" class="box-body table-responsive" style="min-height: 100vh; max-height: 100vh; overflow: auto;">
                                        <!-- Page Editor -->
                                        <div data-bind="visible: $root.displayPageElement()">
                                            <button type="button" data-bind="click: $root.savePage, visible: edited()" class="btn btn-primary btn-flat pull-right">Save</button>
                                            <button type="button" data-bind="click: $root.enableDisablePageEdit" class="btn btn-flat pull-right">Edit</button>
                                            <br />
                                            <label for="subproject" class="control-label">Sub Project</label>
                                            <input type="text" name="subproject" data-bind="value: subProject, valueUpdate: 'keyup', attr: { readonly: $root.enablePageEdit }"
                                                class="form-control">
                                            <label for="name" class="control-label">Page Name</label>
                                            <input type="text" name="name" data-bind="value: name, valueUpdate: 'keyup', attr: { readonly: $root.enablePageEdit }" class="form-control">
                                            <label for="description" class="control-label">Description</label>
                                            <input type="text" name="description" data-bind="value: description, valueUpdate: 'keyup', attr: { readonly: $root.enablePageEdit }"
                                                class="form-control">
                                            <label for="url" class="control-label">Url</label>
                                            <div class="input-group">
                                                <input type="text" name="url" data-bind="value: url, valueUpdate: 'keyup', attr: { readonly: $root.enablePageEdit }" class="form-control">
                                                <span class="input-group-addon" data-toggle="tooltip" data-placement="left" data-html="true" title="You can use <b>${environment}</b> for environment dependent url<br />e.g.: <b>http://core-admin.${environment}.aop.cambridge.org/login'</b>"><i class="fa fa-question-circle"></i></span>
                                            </div>
                                            <label for="author" class="control-label">Author</label>
                                            <input type="text" name="author" data-bind="value: author" class="form-control" readonly>
                                            <div data-bind="visible: lastUpdatedBy()">
                                                <label for="lastUpdatedBy" class="control-label">Last Updated By</label>
                                                <input type="text" name="lastUpdatedBy" data-bind="value: lastUpdatedBy" class="form-control" readonly>
                                            </div>
                                            <div data-bind="visible: createdDate()">
                                                <label for="createdDate" class="control-label">Created Date</label>
                                                <input type="text" name="createdDate" data-bind="value: createdDate" class="form-control" readonly>
                                            </div>
                                            <div data-bind="visible: updatedDate()">
                                                <label for="updatedDate" class="control-label">Updated Date</label>
                                                <input type="text" name="updatedDate" data-bind="value: updatedDate" class="form-control" readonly>
                                            </div>
                                        </div>

                                        <!-- Element Editor -->
                                        <div data-bind="visible: !$root.displayPageElement(), with: ($root.addingObject()) ? newObject : selectedElement">
                                            <button type="button" data-bind="click: $parent.saveObject, visible: edited()" class="btn btn-primary btn-flat pull-right">Save</button>
                                            <button type="button" data-bind="click: $root.enableDisableElementEdit" class="btn btn-flat pull-right">Edit</button>
                                            <br />
                                            <label for="type" class="control-label">Type</label>
                                            <input type="text" name="xpath" data-bind="value: type, valueUpdate: 'keyup', attr: { readonly: $root.enableElementEdit }"
                                                class="form-control">
                                            <label for="name" class="control-label">Name</label>
                                            <input type="text" name="name" data-bind="value: name, valueUpdate: 'keyup', attr: { readonly: $root.enableElementEdit }"
                                                class="form-control">
                                            <label for="selector" class="control-label">Selectors</label>
                                            <div>
                                                <table class="table table-striped table-bordered table-hover dataTables-example" style="margin-bottom: 5px !important;">
                                        <thead>
                                            <tr>
                                                <th class="col-sm-1 center">Default</th>
                                                <th class="col-sm-1 center">Responsive</th>
                                                <th class="col-sm-2 center">OS</th>
                                                <th class="col-sm-2 center">Browser</th>
                                                <th class="col-sm-5 center">Selector</th>
                                                <th class="col-sm-1 center"></th>
                                            </tr>
                                        </thead>
                                        <tbody data-bind="foreach: selectors">
                                            <tr class="gradeX">
                                                <td>
                                                    <div class="i-checks center">
                                                        <label>
                                                            <div>
                                                                <input type="radio" name="defaultGroup" data-bind="checked: $data.default" value="false"/>
                                                                <ins class="iCheck-helper"></ins>
                                                            </div>
                                                        </label>
                                                    </div>
                                                </td>
                                                <td>
                                                    <div class="checkbox checkbox-info center" style="margin: 0 auto;">
                                                        <input type="checkbox" data-bind="checked: $data.responsiveMode"/>
                                                        <label></label>
                                                    </div>
                                                </td>
                                                <td>
                                                    <select class="wide" data-bind="value: $data.os, options: $parent.osReference">
                                                    </select>
                                                </td>
                                                <td>
                                                    <select class="wide" data-bind="value: $data.browser, options: $parent.availableBrowsers" >
                                                    </select>
                                                </td>
                                                <td><textarea class="wide" rows="1" data-bind="value: $data.selector"></textarea></td>
                                                <td>
                                                    <div class="center">
                                                        <a href="#" class="btn btn-white btn-bitbucket" data-bind="click: $parent.removeSelector">
                                                            <i class="fa fa-trash"></i>
                                                        </a>
                                                    </div>
                                                </td>
                                            </tr>
                                        </tbody>
                                    </table>
                                    <button data-bind="click: addSelector" class="btn btn-sm btn-success" style="margin-bottom : 10px;">Add Selector</button>
                                            </div>
                                            <label for="author" class="control-label">Author</label>
                                            <input type="text" name="author" data-bind="value: author" class="form-control" readonly>
                                            <div data-bind="visible: lastUpdatedBy()">
                                                <label for="lastUpdatedBy" class="control-label">Last Updated By</label>
                                                <input type="text" name="lastUpdatedBy" data-bind="value: lastUpdatedBy" class="form-control" readonly>
                                            </div>
                                            <div data-bind="visible: createdDate()">
                                                <label for="createdDate" class="control-label">Created Date</label>
                                                <input type="text" name="createdDate" data-bind="value: createdDate" class="form-control" readonly>
                                            </div>
                                            <div data-bind="visible: updatedDate()">
                                                <label for="updatedDate" class="control-label">Updated Date</label>
                                                <input type="text" name="updatedDate" data-bind="value: updatedDate" class="form-control" readonly>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- /context-menus -->
                    <ul id="defaultContextMenu" class="dropdown-menu" role="menu" style="display: none;z-index: 9999 !important;">
                        <li><a tabindex="-1" href="#" data-bind="click: addPage"><i class="fa fa-plus"></i>&nbsp;&nbsp;&nbsp;Add page</a></li>
                        <li class="divider"></li>
                        <li class="dropdown-submenu">
                            <a class="test" tabindex="-1" href="#"><i class="fa fa-arrows"></i>&nbsp;&nbsp;&nbsp;Display <span class="caret-right"></span></a>
                            <ul class="dropdown-menu">
                                <li><a href="#" data-bind="click: $root.expandAll"><i class="fa fa-expand"></i>&nbsp;&nbsp;&nbsp;Expand all</a></li>
                                <li><a href="#" data-bind="click: $root.collapseAll"><i class="fa fa-compress"></i>&nbsp;&nbsp;&nbsp;Collapse all</a></li>
                            </ul>
                        </li>
                        <li class="divider"></li>
                        <li class="dropdown-submenu">
                            <a class="test" tabindex="-1" href="#"><i class="fa fa-sort"></i>&nbsp;&nbsp;&nbsp;Sort <span class="caret-right"></span></a>
                            <ul class="dropdown-menu">
                                <li class="dropdown-submenu">
                                    <a class="test" href="#" data-bind="click: $root.pageSortAsc.bind($data, 'name')"><i class="fa fa-sort-up"></i>&nbsp;&nbsp;&nbsp;Ascending <span class="caret-right"></span></a>
                                    <ul class="dropdown-menu">
                                        <li><a href="#" data-bind="click: $root.pageSortAsc.bind($data, 'name')"><i class="fa fa-sort-alpha-asc"></i>&nbsp;&nbsp;&nbsp;Name</a></li>
                                        <li><a href="#" data-bind="click: $root.pageSortAsc.bind($data, 'created')"><i class="fa fa-sort-amount-asc"></i>&nbsp;&nbsp;&nbsp;Created date</a></li>
                                        <li><a href="#" data-bind="click: $root.pageSortAsc.bind($data, 'updated')"><i class="fa fa-sort-amount-asc"></i>&nbsp;&nbsp;&nbsp;Updated date</a></li>
                                    </ul>
                                </li>
                                <li class="dropdown-submenu">
                                    <a class="test" href="#" data-bind="click: $root.pageSortDesc.bind($data, 'name')"><i class="fa fa-sort-desc"></i>&nbsp;&nbsp;&nbsp;Descending <span class="caret-right"></span></a>
                                    <ul class="dropdown-menu">
                                        <li><a href="#" data-bind="click: $root.pageSortDesc.bind($data, 'name')"><i class="fa fa-sort-alpha-desc"></i>&nbsp;&nbsp;&nbsp;Name</a></li>
                                        <li><a href="#" data-bind="click: $root.pageSortDesc.bind($data, 'created')"><i class="fa fa-sort-amount-desc"></i>&nbsp;&nbsp;&nbsp;Created date</a></li>
                                        <li><a href="#" data-bind="click: $root.pageSortDesc.bind($data, 'updated')"><i class="fa fa-sort-amount-desc"></i>&nbsp;&nbsp;&nbsp;Updated date</a></li>
                                    </ul>
                                </li>
                            </ul>
                        </li>
                        </li>
                    </ul>

                    <ul id="pageContextMenu" class="dropdown-menu" role="menu" style="display: none;z-index: 9999 !important;">
                        <li><a tabindex="-1" href="#" data-bind="click: addObject"><i class="fa fa-plus"></i>&nbsp;&nbsp;&nbsp;Add object</a></li>
                        <li>
                            <a tabindex="-1" href="#" data-bind="click: copyObject.bind($data, 'paste'), visible: copiedObject()"><i class="fa fa-plus"></i>&nbsp;&nbsp;&nbsp;Paste element</a>
                        </li>
                        <!--<li><a tabindex="-1" href="#" data-bind="click: saveUnsavedElements"><i class="fa fa-save"></i>&nbsp;&nbsp;&nbsp;Save unsaved elements</a></li>-->
                        <li class="divider"></li>
                        <li><a tabindex="-1" href="#"><i class="fa fa-plus"></i>&nbsp;&nbsp;&nbsp;Add page</a></li>
                        <li><a tabindex="-1" href="#"><i class="fa fa-edit"></i>&nbsp;&nbsp;&nbsp;Edit page</a></li>
                        <li class="divider"></li>
                        <li>
                            <a tabindex="-1" href="#" data-bind="click: (selectedPage()) ? selectedPage().deletePage : null"><i class="fa fa-times"></i>&nbsp;&nbsp;&nbsp;Delete page</a>
                        </li>
                        <li class="divider"></li>
                        <li class="dropdown-submenu">
                            <a class="test" tabindex="-1" href="#"><i class="fa fa-sort"></i>&nbsp;&nbsp;&nbsp;Sort <span class="caret-right"></span></a>
                            <ul class="dropdown-menu">
                                <li class="dropdown-submenu">
                                    <a class="test" href="#" data-bind="click: $root.pageSortAsc.bind($data, 'name')"><i class="fa fa-sort-up"></i>&nbsp;&nbsp;&nbsp;Ascending <span class="caret-right"></span></a>
                                    <ul class="dropdown-menu">
                                        <li><a href="#" data-bind="click: $root.pageSortAsc.bind($data, 'name')"><i class="fa fa-sort-alpha-asc"></i>&nbsp;&nbsp;&nbsp;Name</a></li>
                                        <li><a href="#" data-bind="click: $root.pageSortAsc.bind($data, 'created')"><i class="fa fa-sort-amount-asc"></i>&nbsp;&nbsp;&nbsp;Created date</a></li>
                                        <li><a href="#" data-bind="click: $root.pageSortAsc.bind($data, 'updated')"><i class="fa fa-sort-amount-asc"></i>&nbsp;&nbsp;&nbsp;Updated date</a></li>
                                    </ul>
                                </li>
                                <li class="dropdown-submenu">
                                    <a class="test" href="#" data-bind="click: $root.pageSortDesc.bind($data, 'name')"><i class="fa fa-sort-desc"></i>&nbsp;&nbsp;&nbsp;Descending <span class="caret-right"></span></a>
                                    <ul class="dropdown-menu">
                                        <li><a href="#" data-bind="click: $root.pageSortDesc.bind($data, 'name')"><i class="fa fa-sort-alpha-desc"></i>&nbsp;&nbsp;&nbsp;Name</a></li>
                                        <li><a href="#" data-bind="click: $root.pageSortDesc.bind($data, 'created')"><i class="fa fa-sort-amount-desc"></i>&nbsp;&nbsp;&nbsp;Created date</a></li>
                                        <li><a href="#" data-bind="click: $root.pageSortDesc.bind($data, 'updated')"><i class="fa fa-sort-amount-desc"></i>&nbsp;&nbsp;&nbsp;Updated date</a></li>
                                    </ul>
                                </li>
                            </ul>
                        </li>
                        <li class="divider"></li>
                        <li class="dropdown-submenu">
                            <a class="test" tabindex="-1" href="#"><i class="fa fa-arrows"></i>&nbsp;&nbsp;&nbsp;Display <span class="caret-right"></span></a>
                            <ul class="dropdown-menu">
                                <li><a href="#" data-bind="click: $root.expandAll"><i class="fa fa-expand"></i>&nbsp;&nbsp;&nbsp;Expand all</a></li>
                                <li><a href="#" data-bind="click: $root.collapseAll"><i class="fa fa-compress"></i>&nbsp;&nbsp;&nbsp;Collapse all</a></li>
                            </ul>
                        </li>
                    </ul>

                    <ul id="elementContextMenu" class="dropdown-menu" role="menu" style="display: none;z-index: 9999 !important;">
                        <li><a tabindex="-1" href="#" data-bind="click: enableDisableElementEdit"><i class="fa fa-edit"></i>&nbsp;&nbsp;&nbsp;Edit object</a></li>
                        <li><a tabindex="-1" href="#" data-bind="click: copyObject"><i class="fa fa-edit"></i>&nbsp;&nbsp;&nbsp;Copy object</a></li>
                        <li><a tabindex="-1" href="#" data-bind="click: copyObject.bind($data, 'clone')"><i class="fa fa-edit"></i>&nbsp;&nbsp;&nbsp;Copy &amp; paste object</a></li>
                        <li class="divider"></li>
                        <li>
                            <a tabindex="-1" href="#" data-bind="click: (selectedPage()) ? selectedPage().deleteElement : null"><i class="fa fa-times"></i>&nbsp;&nbsp;&nbsp;Delete object</a>
                        </li>
                        <li class="divider"></li>
                        <li class="dropdown-submenu">
                            <a class="test" tabindex="-1" href="#"><i class="fa fa-sort"></i>&nbsp;&nbsp;&nbsp;Sort <span class="caret-right"></span></a>
                            <ul class="dropdown-menu">
                                <li class="dropdown-submenu">
                                    <a class="test" href="#" data-bind="click: $root.elementSortAsc.bind($data, 'name')"><i class="fa fa-sort-up"></i>&nbsp;&nbsp;&nbsp;Ascending <span class="caret-right"></span></a>
                                    <ul class="dropdown-menu">
                                        <li><a href="#" data-bind="click: $root.elementSortAsc.bind($data, 'type')"><i class="fa fa-sort-alpha-asc"></i>&nbsp;&nbsp;&nbsp;Type</a></li>
                                        <li><a href="#" data-bind="click: $root.elementSortAsc.bind($data, 'name')"><i class="fa fa-sort-alpha-asc"></i>&nbsp;&nbsp;&nbsp;Name</a></li>
                                        <li><a href="#" data-bind="click: $root.elementSortAsc.bind($data, 'created')"><i class="fa fa-sort-amount-asc"></i>&nbsp;&nbsp;&nbsp;Created date</a></li>
                                        <li><a href="#" data-bind="click: $root.elementSortAsc.bind($data, 'updated')"><i class="fa fa-sort-amount-asc"></i>&nbsp;&nbsp;&nbsp;Updated date</a></li>
                                    </ul>
                                </li>
                                <li class="dropdown-submenu">
                                    <a class="test" href="#" data-bind="click: $root.elementSortDesc.bind($data, 'name')"><i class="fa fa-sort-desc"></i>&nbsp;&nbsp;&nbsp;Descending <span class="caret-right"></span></a>
                                    <ul class="dropdown-menu">
                                        <li><a href="#" data-bind="click: $root.elementSortDesc.bind($data, 'type')"><i class="fa fa-sort-alpha-desc"></i>&nbsp;&nbsp;&nbsp;Type</a></li>
                                        <li><a href="#" data-bind="click: $root.elementSortDesc.bind($data, 'name')"><i class="fa fa-sort-alpha-desc"></i>&nbsp;&nbsp;&nbsp;Name</a></li>
                                        <li><a href="#" data-bind="click: $root.elementSortDesc.bind($data, 'created')"><i class="fa fa-sort-amount-desc"></i>&nbsp;&nbsp;&nbsp;Created date</a></li>
                                        <li><a href="#" data-bind="click: $root.elementSortDesc.bind($data, 'updated')"><i class="fa fa-sort-amount-desc"></i>&nbsp;&nbsp;&nbsp;Updated date</a></li>
                                    </ul>
                                </li>
                            </ul>
                        </li>
                    </ul>
                    <!-- /.context-menus -->
                </div>
                <!-- /.wrapper-content -->
            </div>
            <% include ../partials/content/indexchat %>
                <% include ../partials/shared/rightsidebar %>
    </div>

    <script>
        function PagesViewModel(pages) {
            var root = this;

            root.pages = ko.observableArray([]);
            root.project = ko.observable(<%- JSON.stringify(project.projectKey) %>);
            root.author = ko.observable(<%- JSON.stringify(user.fullname) %>);

            root.message = ko.observable(undefined);
            root.message.subscribe(function () {
                setTimeout(function () {
                    toastr.options = {
                        closeButton: true,
                        progressBar: true,
                        showMethod: 'slideDown',
                        timeOut: 4000
                    };
                    toastr.success(root.message(), 'Object Repository');

                }, 500);
            });
            
            root.subProjects = ko.observableArray();
            root.authors = ko.observableArray();
            root.types = ko.observableArray();
            root.updatedBys = ko.observableArray();
            root.filter = ko.observable(false);
            root.filterOptions = function () {
                root.filter(!root.filter());
            };
            root.clearFilter = function () {
                root.selectedSubProject(undefined);
                root.selectedAuthor(undefined);
                root.selectedUpdatedBy(undefined);
                root.createdDateRange(undefined);
                root.updatedDateRange(undefined);
            };

            if (pages) {
                root.subProjects.unshift('');
                root.authors.unshift('');
                root.types.unshift('');
                root.updatedBys.unshift('');
                pages.forEach(function (page) {
                    root.pages.push(new Page(page));
                    (!root.subProjects().includes(page.subProject) && page.subProject) ? root.subProjects.push(page.subProject) : null;
                    (!root.authors().includes(page.author) && page.author) ? root.authors.push(page.author) : null;
                    (!root.updatedBys().includes(page.lastUpdatedBy) && page.lastUpdatedBy) ? root.updatedBys.push(page.lastUpdatedBy) : null;
                });
            }

            root.selectedSubProject = ko.observable();
            root.selectedAuthor = ko.observable();
            root.selectedType = ko.observable();
            root.selectedUpdatedBy = ko.observable();
            root.createdDateRange = ko.observable();
            root.updatedDateRange = ko.observable();
            root.filterQuery = ko.computed(function () {
                var orCondition = [];

                if (root.selectedSubProject() != '')
                    orCondition.push({ subProject: root.selectedSubProject() });
                if (root.selectedAuthor() != '')
                    orCondition.push({ author: root.selectedAuthor() });
                if (root.selectedUpdatedBy() != '')
                    orCondition.push({ lastUpdatedBy: root.selectedUpdatedBy() });
                if (root.createdDateRange()) {
                    var cDate = root.createdDateRange().split('~');
                    orCondition.push({ createdDate: { $gt: cDate.shift(), $lt: cDate.pop() } });
                }
                if (root.updatedDateRange()) {
                    var uDate = root.updatedDateRange().split('~');
                    orCondition.push({ updatedDate: { $gt: uDate.shift(), $lt: uDate.pop() } });
                }

                var query = {
                    project: root.project(),
                    $or: (orCondition.length > 0) ? orCondition : undefined
                }

                return JSON.parse(JSON.stringify(query));
            });

            root.filterPages = function () {
                $.ajax({
                    type: 'POST',
                    url: '/api/getPages',
                    data: JSON.stringify({ query: root.filterQuery() }),
                    contentType: 'application/json; charset=utf-8',
                    dataType: 'json',
                    success: function (result) {
                        if (result) {
                            root.pages.removeAll();
                            result.forEach(function (page) {
                                root.pages.push(new Page(page));
                            });
                        }
                    }
                });
            };

            root.newPage = ko.observable(new Page(undefined, true));
            root.selectedPage = ko.observable(undefined);
            root.copiedObject = ko.observable(undefined);
            root.copyObject = function (type) {
                if (type !== 'paste') {
                    var element = JSON.parse(ko.toJSON(root.selectedPage().selectedElement()));
                    element._id = undefined;
                    element.author = root.author();
                    element.lastUpdatedBy = undefined;
                    element.createdDate = new Date().toISOString();
                    element.updatedDate = undefined;
                    element.isClone = true;
                    element.edited = true;

                    root.copiedObject(new Element(element));
                }

                if (type == 'clone') {
                    root.selectedPage().elements.push(root.copiedObject());
                    root.selectedPage().selectElement(root.selectedPage().elements().length - 1);
                    root.copiedObject(undefined);
                } else if (type == 'paste') {
                    root.selectedPage().elements.push(root.copiedObject());
                    root.selectedPage().selectElement(root.selectedPage().elements().length - 1);
                    root.copiedObject(undefined);
                }
            };
            root.displayPageElement = ko.observable(true);

            root.saveUnsavedElements = function () {
                var queue = [];
                root.selectedPage().elements().forEach(function (element, index) {
                    if (element.edited()) {
                        root.selectedPage().selectElement(index);
                        root.selectedPage().saveObject();
                    }
                })
            };

            function Page(page, isNew) {
                var self = this;
                self.oldSubProject = ko.observable((page) ? page.subProject : undefined);
                self.oldName = ko.observable((page) ? page.name : undefined);
                self.oldDescription = ko.observable((page) ? page.description : undefined);
                self.oldUrl = ko.observable((page) ? page.url : undefined);

                self.id = ko.observable((page) ? page._id : undefined);
                self.project = ko.observable((page) ? page.project : root.project());
                self.subProject = ko.observable((page) ? page.subProject : undefined);
                self.name = ko.observable((page) ? page.name : undefined);
                self.description = ko.observable((page) ? page.description : undefined);
                self.url = ko.observable((page) ? page.url : undefined);
                self.author = ko.observable((page) ? page.author : (isNew) ? root.author() : undefined);
                self.lastUpdatedBy = ko.observable((page) ? page.lastUpdatedBy : undefined);
                self.createdDate = ko.observable((page) ? page.createdDate : undefined);
                self.updatedDate = ko.observable((page) ? page.updatedDate : undefined);
                self.elements = ko.observableArray();
                if (page)
                    if (page.elements) {
                        page.elements.forEach(function (element) {
                            self.elements.push(new Element(element));
                        })
                    };
                self.newObject = ko.observable(new Element(undefined, true));

                self.edited = ko.observable(false);
                self.subProject.subscribe(function () {
                    (self.oldSubProject() != self.subProject()) ? self.edited(true) : self.edited(false);
                });
                self.name.subscribe(function () {
                    (self.oldName() != self.name()) ? self.edited(true) : self.edited(false);
                });
                self.description.subscribe(function () {
                    (self.oldDescription() != self.description()) ? self.edited(true) : self.edited(false);
                });
                self.url.subscribe(function () {
                    (self.oldUrl() != self.url()) ? self.edited(true) : self.edited(false);
                });
                self.updatePage = function () {
                    self.oldSubProject = ko.observable(self.subProject());
                    self.oldName = ko.observable(self.name());
                    self.oldDescription = ko.observable(self.description());
                    self.oldUrl = ko.observable(self.url());
                    self.edited(false);
                };

                self.saveObject = function () {
                    if (root.addingObject() || self.selectedElement().isClone()) {
                        if (root.addingObject()) {
                            $.ajax({
                                type: 'POST',
                                url: '/api/pages/elements',
                                data: JSON.stringify({ pageId: self.id(), element: JSON.parse(ko.toJSON(self.newObject())) }),
                                contentType: 'application/json; charset=utf-8',
                                dataType: 'json',
                                success: function (result) {
                                    root.displayPageElement(true);
                                    self.newObject().updateElement();
                                    self.newObject()._id(result.element);
                                    self.elements.push(self.newObject());
                                    self.newObject(new Element(undefined, true));
                                    root.addingObject(false);
                                    root.enableDisableElementEdit();
                                    root.message(result.message);
                                },
                                error: function (result) {
                                    root.message(result.responseJSON.message);
                                }
                            });
                        } else {
                            if (self.selectedElement().isClone()) {
                                $.ajax({
                                    type: 'POST',
                                    url: '/api/pages/elements',
                                    data: JSON.stringify({ pageId: self.id(), element: JSON.parse(ko.toJSON(self.selectedElement())) }),
                                    contentType: 'application/json; charset=utf-8',
                                    dataType: 'json',
                                    success: function (result) {
                                        self.selectedElement()._id(result.element);
                                        self.selectedElement().updateElement();
                                        self.selectedElement().isClone(false);
                                        root.enableDisableElementEdit();
                                        root.message(result.message);
                                    },
                                    error: function (result) {
                                        root.message(result.responseJSON.message);
                                    }
                                });
                            }
                        }
                    } else {
                        self.selectedElement().lastUpdatedBy(root.author());
                        self.selectedElement().updatedDate(new Date().toISOString());
                        $.ajax({
                            type: 'PUT',
                            url: '/api/pages/elements',
                            data: JSON.stringify({ pageId: self.id(), element: JSON.parse(ko.toJSON(self.selectedElement())) }),
                            contentType: 'application/json; charset=utf-8',
                            dataType: 'json',
                            success: function (result) {
                                self.elements().filter(_ => _._id() == result.element)[0].updateElement();
                                root.enableDisableElementEdit();
                                root.message(result.message);
                            },
                            error: function (result) {
                                root.message(result.responseJSON.message);
                            }
                        });
                    }
                };
                self.selectedElement = ko.observable(undefined);
                self.selectElement = function (index) {
                    self.selectedElement(self.elements()[(typeof index == 'function') ? index() : index]);
                };
                self.deleteElement = function () {
                    if (!self.selectedElement()._id()) {
                        self.elements.remove(self.selectedElement());
                        return;
                    }

                    $.ajax({
                        type: 'DELETE',
                        url: '/api/pages/elements',
                        data: JSON.stringify({ pageId: self.id(), element: JSON.parse(ko.toJSON(self.selectedElement())) }),
                        contentType: 'application/json; charset=utf-8',
                        dataType: 'json',
                        success: function (result) {
                            self.elements.remove(self.selectedElement());
                            root.message(result.message);
                        },
                        error: function (result) {
                            root.message(result.message);
                        }
                    });
                };
                self.deletePage = function () {
                    $.ajax({
                        type: 'DELETE',
                        url: '/api/pages',
                        data: { pageId: self.id() },
                        success: function (result) {
                            var index = root.pages.indexOf(root.pages().find(_ => _.id() == self.id()));
                            root.pages.splice(index, 1);
                            root.message(result.message);
                        },
                        error: function (result) {
                            root.message(result.message);
                        }
                    })
                }
            };

            function Element(element, isNew) {
                var self = this;

                self.oldType = ko.observable((element) ? element.type : undefined);
                self.oldName = ko.observable((element) ? element.name : undefined);
                self.oldSelectors = ko.observable((element) ? element.selectors : undefined);
                self._id = ko.observable((element) ? element._id : undefined);
                self.type = ko.observable((element) ? element.type : undefined);
                self.name = ko.observable((element) ? element.name : undefined);
                self.author = ko.observable((element) ? element.author : (isNew) ? root.author() : undefined);
                self.lastUpdatedBy = ko.observable((element) ? element.lastUpdatedBy : undefined);
                self.createdDate = ko.observable((element) ? element.createdDate : (isNew) ? new Date().toISOString() : undefined);
                self.updatedDate = ko.observable((element) ? element.updatedDate : undefined);
                self.browserReference = ["firefox","chrome","edge"];
                self.osReference = ["windows","macOs","linux","android","ios"];
                self.dummy = ko.observable();
                self.isClone = ko.observable((element) ? element.isClone : false);
                self.edited = ko.observable((element) ? element.edited : false);

                self.selectors = ko.observableArray();
                if (element)
                    if (element.selectors) {
                        element.selectors.forEach(function (selector) {
                            self.selectors.push(new Selector(selector));
                        })
                    };
                self.newSelector = ko.observable(new Selector(undefined, true));

                self.type.subscribe(function () {
                    (self.oldType() != self.type()) ? self.edited(true) : self.edited(false);
                });
                self.name.subscribe(function () {
                    (self.oldName() != self.name()) ? self.edited(true) : self.edited(false);
                });
                self.selectors.subscribe(function () {
                    (self.oldSelectors() != self.selectors()) ? self.edited(true) : self.edited(false);
                });

                self.updateElement = function () {
                    self.oldType(self.type());
                    self.oldName(self.name());
                    self.oldSelectors(self.selectors());
                    self.edited(false);
                };

                self.addSelector = function() {
                    if (self.selectors().length == 0){
                        var select = new Selector (undefined, true, true);
                        self.selectors.push(select);
                    } else {
                        self.selectors.push(new Selector (undefined, true, false));
                    }
                    self.dummy.notifySubscribers();
                }

                self.removeSelector = function(selector) {
                    self.selectors.remove(selector);
                }

                self.availableBrowsers = ko.computed( function () {
                    self.dummy();
                    var browsers = self.browserReference;
                    var reference = browsers;
                    var len = self.selectors().length;
                    if (!self.selectors()[len] || len == 0)
                        return browsers;

                    var lastOs = self.selectors()[len].os;

                    if (lastOs.responsiveMode == false){
                        for (var i = 0; i < self.selectors().length; i++){
                            if (lastOs.equals(self.selectors()[i]).os){
                                browsers = browsers.filter(e => e !== self.selectors()[i].browser)
                            }
                        }
                    }
                    return browsers;                 
                });
            };

            function Selector(selector, isNew, isDefault) {
                var self = this;
                
                self.oldSelector = ko.observable((selector) ? selector.selector : undefined);
                self.oldDefault = ko.observable((selector) ? selector.default : false);
                self.oldResponsiveMode = ko.observable((selector) ? selector.responsiveMode : undefined);
                self.oldOs = ko.observable((selector) ? selector.os : undefined);
                self.oldBrowser = ko.observable((selector) ? selector.browser : undefined);

                self._id = ko.observable((selector) ? selector._id : undefined);
                self.selector = ko.observable((selector) ? selector.selector : (isNew) ? '//' : undefined);
                self.default = ko.observable((selector) ? selector.default : (isDefault) ? true : false);
                self.responsiveMode = ko.observable((selector) ? selector.responsiveMode : false);
                self.os = ko.observable((selector) ? selector.os : undefined);
                self.browser = ko.observable((selector) ? selector.browser : undefined);

                self.isClone = ko.observable((selector) ? selector.isClone : false);
                self.edited = ko.observable((selector) ? selector.edited : false);

                self.selector.subscribe(function () {
                    (self.oldSelector() != self.selector()) ? self.edited(true) : self.edited(false);
                });

                self.default.subscribe(function () {
                    (self.oldDefault() != self.default()) ? self.edited(true) : self.edited(false);
                });

                self.responsiveMode.subscribe(function () {
                    (self.oldResponsiveMode() != self.responsiveMode()) ? self.edited(true) : self.edited(false);
                });

                self.os.subscribe(function () {
                    (self.oldOs() != self.os()) ? self.edited(true) : self.edited(false);
                });

                self.browser.subscribe(function () {
                    (self.oldBrowser() != self.browser()) ? self.edited(true) : self.edited(false);
                });


                self.updateSelector = function () {
                    self.oldSelector(self.selector());
                    self.oldDefault(self.default());
                    self.oldResponsiveMode(self.responsiveMode());
                    self.oldOs(self.os());
                    self.oldBrowser(self.browser());
                    self.edited(false);
                };
            };

            root.getIcon = function (element) {
                var type = element.type();
                if (type == 'button')
                    return 'tablet'
                else if (type == 'href')
                    return 'link'
                else if (type == 'inputText')
                    return 'pencil'
                else if (type == 'checkbox')
                    return 'check-square-o'

                return 'circle-thin'
            };

            root.addingObject = ko.observable(false);
            root.addObject = function () {
                root.enableElementEdit(false);
                root.addingObject(true);
                root.displayPageElement(false);
            };
            root.enableElementEdit = ko.observable(false);
            root.enableDisableElementEdit = function () {
                root.enableElementEdit(!root.enableElementEdit());
            };

            root.addingPage = ko.observable(false);
            root.addPage = function () {
                root.enablePageEdit(false);
                root.addingPage(true);
                root.displayPageElement(true);
            };
            root.enablePageEdit = ko.observable(false);
            root.enableDisablePageEdit = function () {
                root.enablePageEdit(!root.enablePageEdit());
            };

            root.savePage = function () {
                if (root.addingPage()) {
                    $.ajax({
                        type: 'POST',
                        url: '/api/pages',
                        data: JSON.stringify({ page: JSON.parse(ko.toJSON(root.newPage())) }),
                        contentType: 'application/json; charset=utf-8',
                        dataType: 'json',
                        success: function (result) {
                            root.newPage().updatePage();
                            root.newPage().id(result.page);
                            root.pages.push(root.newPage());
                            root.newPage(new Page(undefined, true));
                            //self.newObject().updateElement();
                            root.addingPage(false);
                            root.enableDisablePageEdit()
                            root.message(result.message);
                        },
                        error: function (result) {
                            root.message(result.message);
                        }
                    });
                } else {
                    root.selectedPage().lastUpdatedBy(root.author());
                    $.ajax({
                        type: 'PUT',
                        url: '/api/pages',
                        data: JSON.stringify({ page: JSON.parse(ko.toJSON(root.selectedPage())) }),
                        contentType: 'application/json; charset=utf-8',
                        dataType: 'json',
                        success: function (result) {
                            self.selectedPage().updatePage();
                            root.enableDisablePageEdit();
                            root.message(result.message);
                        },
                        error: function (result) {
                            root.message(result.message);
                        }
                    });
                }
            };

            root.showPageData = function (index) {
                root.enablePageEdit(true);
                root.addingPage(false);
                root.displayPageElement(true);
                root.selectedPage(root.pages()[index()]);
            };

            root.showElementData = function (parent, index) {
                root.enableElementEdit(true);
                root.selectedPage((root.pages().filter(_ => _.name() == parent.name()))[0]);
                root.selectedPage().selectElement(index);
                root.addingObject(false);
                root.displayPageElement(false);
            };

            root.expandAll = function (data, event) {
                $($('#pages-view').find('div')).each(function (index, div) {
                    $($($(div).find('i')).first()).switchClass('fa-caret-down', 'fa-caret-up');
                    $($(div).next()).show();
                });
            };

            root.collapseAll = function (data, event) {
                $($('#pages-view').find('div')).each(function (index, div) {
                    $($($(div).find('i')).first()).switchClass('fa-caret-up', 'fa-caret-down');
                    $($(div).next()).hide();
                });
            };

            root.pageSortAsc = function (param) {
                root.pages.sort(function (a, b) {
                    switch (param) {
                        case 'name':
                            var ax = a.name().toUpperCase();
                            var bx = b.name().toUpperCase();
                            if (ax == bx)
                                return 0;

                            return (ax > bx) ? 1 : -1;
                            break;
                        case 'created':
                            var ax = new Date(a.createdDate());
                            var bx = new Date(b.createdDate());
                            if (ax == bx)
                                return 0;

                            return (ax > bx) ? 1 : -1;
                            break;
                        case 'updated':
                            var ax = new Date(a.updatedDate());
                            var bx = new Date(b.updatedDate());
                            if (ax == bx)
                                return 0;

                            if (ax == 'Invalid Date' && bx != 'Invalid Date')
                                return 1;
                            else if (ax != 'Invalid Date' && bx == 'Invalid Date')
                                return -1;

                            return (ax > bx) ? 1 : -1;
                            break;
                    }
                });
            };

            root.pageSortDesc = function (param) {
                root.pages.sort(function (a, b) {
                    switch (param) {
                        case 'name':
                            var ax = a.name().toUpperCase();
                            var bx = b.name().toUpperCase();
                            if (ax == bx)
                                return 0;

                            return (ax > bx) ? 1 : -1;
                            break;
                        case 'type':
                            var ax = a.type().toUpperCase();
                            var bx = b.type().toUpperCase();
                            if (ax == bx)
                                return 0;

                            return (ax > bx) ? 1 : -1;
                            break;
                        case 'created':
                            var ax = new Date(a.createdDate());
                            var bx = new Date(b.createdDate());
                            if (ax == bx)
                                return 0;

                            return (ax > bx) ? 1 : -1;
                            break;
                        case 'updated':
                            var ax = new Date(a.updatedDate());
                            var bx = new Date(b.updatedDate());
                            if (ax == bx)
                                return 0;

                            if (ax == 'Invalid Date' && bx != 'Invalid Date')
                                return 1;
                            else if (ax != 'Invalid Date' && bx == 'Invalid Date')
                                return -1;

                            return (ax > bx) ? 1 : -1;
                            break;
                    }
                }).reverse();
            };

            root.elementSortAsc = function (param) {
                root.pages().filter(_ => _.name() == root.selectedPage().name())[0].elements.sort(function (a, b) {
                    switch (param) {
                        case 'name':
                            var ax = a.name().toUpperCase();
                            var bx = b.name().toUpperCase();
                            if (ax == bx)
                                return 0;

                            return (ax > bx) ? 1 : -1;
                            break;
                        case 'type':
                            var ax = a.type().toUpperCase();
                            var bx = b.type().toUpperCase();
                            if (ax == bx)
                                return 0;

                            return (ax > bx) ? 1 : -1;
                            break;
                        case 'created':
                            var ax = new Date(a.createdDate());
                            var bx = new Date(b.createdDate());
                            if (ax == bx)
                                return 0;

                            return (ax > bx) ? 1 : -1;
                            break;
                        case 'updated':
                            var ax = new Date(a.updatedDate());
                            var bx = new Date(b.updatedDate());
                            if (ax == bx)
                                return 0;

                            if (ax == 'Invalid Date' && bx != 'Invalid Date')
                                return 1;
                            else if (ax != 'Invalid Date' && bx == 'Invalid Date')
                                return -1;

                            return (ax > bx) ? 1 : -1;
                            break;
                    }
                });
            };

            root.elementSortDesc = function (param) {
                root.pages().filter(_ => _.name() == root.selectedPage().name())[0].elements.sort(function (a, b) {
                    switch (param) {
                        case 'name':
                            var ax = a.name().toUpperCase();
                            var bx = b.name().toUpperCase();
                            if (ax == bx)
                                return 0;

                            return (ax > bx) ? 1 : -1;
                            break;
                        case 'created':
                            var ax = new Date(a.createdDate());
                            var bx = new Date(b.createdDate());
                            if (ax == bx)
                                return 0;

                            return (ax > bx) ? 1 : -1;
                            break;
                        case 'updated':
                            var ax = new Date(a.updatedDate());
                            var bx = new Date(b.updatedDate());
                            if (ax == bx)
                                return 0;

                            if (ax == 'Invalid Date' && bx != 'Invalid Date')
                                return 1;
                            else if (ax != 'Invalid Date' && bx == 'Invalid Date')
                                return -1;

                            return (ax > bx) ? 1 : -1;
                            break;
                    }
                }).reverse();
            };

            ko.bindingHandlers.collapsible = {
                init: function (element, valueAccessor) {
                    $(element).on('click', function (e) {
                        var list = $($($(element).parent()).next());
                        var caret = $(element);
                        if (list.css('display') == 'none') {
                            caret.switchClass('fa-caret-down', 'fa-caret-up');
                            list.show();
                        } else {
                            caret.switchClass('fa-caret-up', 'fa-caret-down');
                            list.hide();
                        }
                    })
                }
            };

            root.createdSelectedRange = ko.observable();
            root.createdSelectedDate = ko.observable();
            root.updatedDateRanges = ko.computed(function () {
                var obj = {
                    'Today': [moment(), moment()],
                    'Yesterday': [moment().subtract(1, 'days'), moment().subtract(1, 'days')],
                    'Last 7 Days': [moment().subtract(6, 'days'), moment()],
                    'Last 30 Days': [moment().subtract(29, 'days'), moment()],
                    'This Month': [moment().startOf('month'), moment().endOf('month')],
                    'Last Month': [moment().subtract(1, 'month').startOf('month'), moment().subtract(1, 'month').endOf('month')]
                };

                if (root.createdSelectedRange() == 'Today') {
                    return obj = {
                        'Today': [moment(), moment()]
                    }
                }

                if (root.createdSelectedRange() == 'Yesterday') {
                    return obj = {
                        'Today': [moment(), moment()],
                        'Yesterday': [moment().subtract(1, 'days'), moment().subtract(1, 'days')],
                    }
                }

                if (root.createdSelectedRange() == 'Last 7 Days') {
                    return obj = {
                        'Today': [moment(), moment()],
                        'Yesterday': [moment().subtract(1, 'days'), moment().subtract(1, 'days')],
                        'Last 7 Days': [moment().subtract(6, 'days'), moment()],
                    }
                }

                if (root.createdSelectedRange() == 'Last 30 Days') {
                    return obj = {
                        'Today': [moment(), moment()],
                        'Yesterday': [moment().subtract(1, 'days'), moment().subtract(1, 'days')],
                        'Last 7 Days': [moment().subtract(6, 'days'), moment()],
                        'Last 30 Days': [moment().subtract(29, 'days'), moment()]
                    }
                }

                if (root.createdSelectedRange() == 'Last Month') {
                    return obj = {
                        'Last Month': [moment().subtract(1, 'month').startOf('month'), moment().subtract(1, 'month').endOf('month')]
                    }
                }

                if (root.createdSelectedRange() == 'This Month') {
                    return obj = {
                        'This Month': [moment().startOf('month'), moment().endOf('month')]
                    }
                }            

                if (root.createdSelectedRange() == 'Custom Range') {
                    return obj = {};
                }

                return obj;
            });

            ko.bindingHandlers.datePicker = {
                init: function (element, valueAccessor) {
                    $(element).daterangepicker({
                        locale: {
                            cancelLabel: 'Clear'
                        },
                        ranges: {
                            'Today': [moment(), moment()],
                            'Yesterday': [moment().subtract(1, 'days'), moment().subtract(1, 'days')],
                            'Last 7 Days': [moment().subtract(6, 'days'), moment()],
                            'Last 30 Days': [moment().subtract(29, 'days'), moment()],
                            'This Month': [moment().startOf('month'), moment().endOf('month')],
                            'Last Month': [moment().subtract(1, 'month').startOf('month'), moment().subtract(1, 'month').endOf('month')]
                        },
                        drops: 'down',
                        opens: 'center',
                        minDate: '01/01/2017',
                        maxDate: moment()
                    });

                    var pickerType = $(element).data('picker-date');
                    var observable = $(element).data('picker-observable');

                    $(element).on('apply.daterangepicker', function (event, picker) {
                        if (picker.chosenLabel == 'Today' || picker.chosenLabel == 'Yesterday') {
                            $($(element).find('span')).html(`${pickerType} at ${picker.startDate.format("MMMM D, YYYY")}`);
                        } else {
                            $($(element).find('span')).html(`${pickerType} from ${picker.startDate.format("MMMM D, YYYY")} to ${picker.endDate.format("MMMM D, YYYY")}`);
                        }

                        if (pickerType == 'Created') {
                            if (picker.chosenLabel == 'Custom Range')
                                root.createdSelectedDate(`${picker.startDate.format('YYYY-MM-DD')}~${picker.endDate.format('YYYY-MM-DD')}`);
                            root.createdSelectedRange(picker.chosenLabel);
                            root.updatedDateRange(undefined);
                        }

                        root[observable](`${picker.startDate.format('YYYY-MM-DDT00:00:00')}~${picker.endDate.format('YYYY-MM-DDT23:59:59')}`);
                    });

                    $(element).on('cancel.daterangepicker', function (event, picker) {
                        $($(element).find('span')).html(`Filter by ${pickerType.toLowerCase()} date`);
                        root[observable](undefined);
                    });
                },
                update: function (element, valueAccessor) {
                    var pickerType = $(element).data('picker-date');
                    var observable = $(element).data('picker-observable');
                    if (!root[observable]())
                        $($(element).find('span')).html(`Filter by ${pickerType.toLowerCase()} date`);

                    if (pickerType == 'Updated') {
                        var min;
                        var max;
                        if (root.createdSelectedRange() == 'Custom Range') {
                            var range = root.createdSelectedDate().split('~');
                            min = range.shift();
                            max = range.pop();
                        }
                        $(element).daterangepicker({
                            locale: {
                                cancelLabel: 'Clear'
                            },
                            ranges: root.updatedDateRanges(),
                            drops: 'down',
                            opens: 'center',
                            minDate: (min) ? moment(min) : '01/01/2017',
                            maxDate: (max) ? moment(max) : moment()
                        });

                        var pickerType = $(element).data('picker-date');
                        var observable = $(element).data('picker-observable');

                        $(element).on('apply.daterangepicker', function (event, picker) {
                            if (picker.chosenLabel == 'Today' || picker.chosenLabel == 'Yesterday') {
                                $($(element).find('span')).html(`${pickerType} at ${picker.startDate.format("MMMM D, YYYY")}`);
                            } else {
                                $($(element).find('span')).html(`${pickerType} from ${picker.startDate.format("MMMM D, YYYY")} to ${picker.endDate.format("MMMM D, YYYY")}`);
                            }

                            root[observable](`${picker.startDate.format('YYYY-MM-DDT00:00:00')}~${picker.endDate.format('YYYY-MM-DDT23:59:59')}`);
                        });

                        $(element).on('cancel.daterangepicker', function (event, picker) {
                            $($(element).find('span')).html(`Filter by ${pickerType.toLowerCase()} date`);
                            root[observable](undefined);
                        });
                    }
                }
            }

            ko.bindingHandlers.defaultContextMenu = {
                init: function (element, valueAccessor) {
                    // Open context menu
                    $(element).on("contextmenu", function (e) {
                        // return native menu if pressing control
                        if (e.ctrlKey) return;

                        $('#elementContextMenu').hide();
                        $('#pageContextMenu').hide();

                        //open menu
                        var $menu = $('#defaultContextMenu')
                            .data("invokedOn", $(e.target))
                            .show()
                            .css({
                                position: "absolute",
                                left: getMenuPosition(e.clientX, 'width', 'scrollLeft'),
                                top: getMenuPosition(e.clientY, 'height', 'scrollTop')
                            })
                            .off('click')
                            .on('click', 'li', function (e) {
                                /*if(e.target.getAttribute('data-submenu') == null) {
                                    $menu.hide();
                                } else {
                                    $menu.hide();
                                } */
                                $menu.hide();
                            });

                        return false;
                    });

                    function getMenuPosition(mouse, direction, scrollDir) {
                        var win = $(window)[direction](),
                            scroll = $(window)[scrollDir](),
                            menu = $('#pageContextMenu')[direction](),
                            position = mouse + scroll;

                        if (direction == 'width')
                            position -= $('#sidebar').width();

                        // opening menu would pass the side of the page
                        if (mouse + menu > win && menu < mouse)
                            position -= menu;

                        return position;
                    };

                    //make sure menu closes on any click
                    $('body').click(function () {
                        $('#defaultContextMenu').hide();
                    });
                }
            };

            ko.bindingHandlers.pageContextMenu = {
                init: function (element, valueAccessor) {
                    // Open context menu
                    $(element).on("contextmenu", function (e) {
                        var params = valueAccessor();
                        root.displayPageElement(true);
                        root.addingPage(false);
                        root.showPageData(params.index);

                        // return native menu if pressing control
                        if (e.ctrlKey) return;

                        $('#elementContextMenu').hide();
                        $('#defaultContextMenu').hide()

                        //open menu
                        var $menu = $('#pageContextMenu')
                            .data("invokedOn", $(e.target))
                            .show()
                            .css({
                                position: "absolute",
                                left: getMenuPosition(e.clientX, 'width', 'scrollLeft'),
                                top: getMenuPosition(e.clientY, 'height', 'scrollTop')
                            })
                            .off('click')
                            .on('click', 'li', function (e) {
                                $menu.hide();
                            })

                        return false;
                    });

                    function getMenuPosition(mouse, direction, scrollDir) {
                        var win = $(window)[direction](),
                            scroll = $(window)[scrollDir](),
                            menu = $('#pageContextMenu')[direction](),
                            position = mouse + scroll;

                        if (direction == 'width')
                            position -= $('#sidebar').width();

                        // opening menu would pass the side of the page
                        if (mouse + menu > win && menu < mouse)
                            position -= menu;

                        return position;
                    };

                    //make sure menu closes on any click
                    $('body').click(function () {
                        $('#pageContextMenu').hide();
                    });
                }
            };

            ko.bindingHandlers.elementContextMenu = {
                init: function (element, valueAccessor) {
                    // Open context menu
                    $(element).on("contextmenu", function (e) {
                        var params = valueAccessor();
                        root.showElementData(params.page, params.index);
                        root.addingObject(false);
                        root.displayPageElement(false);

                        // return native menu if pressing control
                        if (e.ctrlKey) return;

                        $('#pageContextMenu').hide();
                        $('#defaultContextMenu').hide()

                        //open menu
                        var $menu = $('#elementContextMenu')
                            .data("invokedOn", $(e.target))
                            .show()
                            .css({
                                position: "absolute",
                                left: getMenuPosition(e.clientX, 'width', 'scrollLeft'),
                                top: getMenuPosition(e.clientY, 'height', 'scrollTop')
                            })
                            .off('click')
                            .on('click', 'li', function (e) {
                                $menu.hide();

                                /*var $invokedOn = $menu.data("invokedOn");
                                var $selectedMenu = $(e.target);
                                
                                menuSelected($invokedOn, $selectedMenu);*/
                            })

                        return false;
                    });

                    function getMenuPosition(mouse, direction, scrollDir) {
                        var win = $(window)[direction](),
                            scroll = $(window)[scrollDir](),
                            menu = $('#elementContextMenu')[direction](),
                            position = mouse + scroll;

                        if (direction == 'width')
                            position -= $('#sidebar').width();

                        // opening menu would pass the side of the page
                        if (mouse + menu > win && menu < mouse)
                            position -= menu;

                        return position;
                    };

                    /*function menuSelected(invokedOn, selectedMenu) {
                        var msg = "You selected the menu item '" + selectedMenu.text() +
                            "' on the value '" + invokedOn.text() + "'";
                    }*/

                    //make sure menu closes on any click
                    $('body').click(function () {
                        $('#elementContextMenu').hide();
                    });
                }
            };
        };

        ko.applyBindings(new PagesViewModel(<%- JSON.stringify(pages) %>), document.getElementById('wrapper-content'));
    </script>

    <% include ../partials/shared/trellomodal %>
        <% include ../partials/shared/trelloscripts %>
            <% include ../partials/shared/scripts %>
</body>

</html>