<!DOCTYPE html>
<html>

<head>
    <% include ../partials/shared/head %>
        <style>
            .jquery-invalid {
                display: block !important;
            }
        </style>
</head>

<body <% if (user && user.preferences && (user.preferences.sidebarMenuExpand)) { %>class="mini-navbar" <% } else { %> class="" <% } %> >
    <div id="wrapper">
        <% include ../partials/shared/sidebar %>

            <div id="page-wrapper" class="gray-bg dashbard-1">
                <div class="row border-bottom">
                    <% include ../partials/shared/header %>
                </div>
                <div class="row wrapper border-bottom white-bg page-heading">
                    <div class="col-lg-10">
                        <h2>User Management</h2>
                        <ol class="breadcrumb">
                            <li>
                                <a href="/">Dashboard</a>
                            </li>
                            <li>
                                <a href="/user_management">User Management</a>
                            </li>
                            <li class="active">
                                <strong>Invite Users</strong>
                            </li>
                        </ol>
                    </div>
                    <div class="col-lg-2"></div>
                </div>
                <div class="wrapper wrapper-content">
                    <div class="row">
                        <div class="ibox float-e-margins border-bottom">
                            <div class="ibox-title">
                                <h5>Filter Options</h5>
                                <div class="ibox-tools">
                                    <a class="collapse-link">
                                        <i class="fa fa-chevron-down"></i>
                                    </a>
                                </div>
                            </div>
                            <div class="ibox-content" style="display: none;">
                                <form class="form-horizontal" data-bind="filterForm">
                                    <div class="form-group">
                                        <label class="col-sm-2 control-label">Available Roles</label>
                                        <div class="col-sm-10">
                                            <div name="roles" class="input-group">
                                                <select name="roles" class="form-control" data-bind="options: $root.filterAvailableRoles, optionsText: 'name', value: $root.filterSelectedRole"></select>
                                                <span class="input-group-btn">
                                                    <button type="button" class="btn btn-info btn-flat" data-bind="click: $root.filterIncludeRole, enable: $root.filterRoleAddButton">Include</button>
                                                    <button type="button" class="btn btn-danger btn-flat" data-bind="click: $root.filterExcludeRole, enable: $root.filterRoleAddButton">Exclude</button>
                                                </span>
                                            </div>
                                            <div name="userroles" data-bind="foreach: $root.filterRoles">
                                                <span data-bind="attr: { class: ($data.include) ? 'label label-primary' : 'label label-danger' }, html: $data.name + '&nbsp;&nbsp;<i class=\'fa fa-times\'></i>', click: $root.filterRemoveRole.bind($data, $data.value)"></span>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="hr-line-dashed"></div>
                                    <div class="form-group">
                                        <label class="col-sm-2 control-label">Name (contains)</label>
                                        <div class="col-sm-10">
                                            <input type="text" data-bind="value: $root.filterName" class="form-control">
                                        </div>
                                    </div>
                                    <div class="form-group">
                                        <label class="col-sm-2 control-label">Email (contains)</label>
                                        <div class="col-sm-10">
                                            <input type="text" data-bind="value: $root.filterEmail" class="form-control">
                                        </div>
                                    </div>
                                    <div class="form-group">
                                        <label class="col-sm-2 control-label">Job title (contains)</label>
                                        <div class="col-sm-10">
                                            <input type="text" data-bind="value: $root.filterJobTitle" class="form-control">
                                        </div>
                                    </div>
                                    <div class="hr-line-dashed"></div>
                                    <div class="form-group">
                                        <div class="col-sm-4 col-sm-offset-2">
                                            <button data-bind="click: $root.clearFilterForm" class="btn btn-white" type="button">Clear</button>
                                            <button data-bind="html: $root.submitFilterFormHTML" class="btn btn-primary" type="submit"></button>
                                        </div>
                                    </div>
                            </div>
                            </form>
                        </div>
                    </div>
                    <div class="row">
                        <div class="tabs-container">
                            <ul class="nav nav-tabs">
                                <li class="active"><a data-toggle="tab" href="#tab-1">Table View</a></li>
                                <li class=""><a data-toggle="tab" href="#tab-2">Detailed View</a></li>
                            </ul>
                            <div class="tab-content">
                                <div id="tab-1" class="tab-pane active">
                                    <div class="panel-body">
                                        <button type="button" data-bind="click: $root.addNewUserTrigger.bind($data, false)" class="btn btn-primary pull-right">Invite User</button>
                                        <div class="ibox float-e-margins">
                                            <div class="ibox-content" style="border-style: none !important;" data-bind="pageContextMenu">
                                                <div class="table-responsive">
                                                    <table class="table table-striped table-bordered table-hover dataTables-example">
                                                        <thead>
                                                            <tr>
                                                                <th style="width: 10px">#</th>
                                                                <th>Username</th>
                                                                <th>Email</th>
                                                                <th>First name</th>
                                                                <th>Last name</th>
                                                                <th>Job title</th>
                                                                <th>Roles</th>
                                                                <th>Enabled</th>
                                                                <th></th>
                                                            </tr>
                                                        </thead>
                                                        <tbody data-bind="foreach: $root.pagedUsers">
                                                            <tr class="gradeX" data-bind="userContextMenu: $data">
                                                                <td data-bind="html: ($index() + 1)"></td>
                                                                <td data-bind="html: $data.username"></td>
                                                                <td data-bind="html: $data.email"></td>
                                                                <td data-bind="html: $data.firstName"></td>
                                                                <td data-bind="html: $data.lastName"></td>
                                                                <td data-bind="html: $data.jobTitle"></td>
                                                                <td data-bind="html: $data.roles"></td>
                                                                <td data-bind="html: $data.enabled"></td>
                                                                <td>
                                                                    <a href="#" data-bind="event: { mouseover: $root.selectUser.bind($data, _id) }" data-toggle="modal" data-target="#user-modal"
                                                                        title="Edit user"><i class="fa fa-edit text-navy"></i></a>
                                                                    <a href="#" data-bind="event: { mouseover: $root.selectUser.bind($data, _id) }, click: $root.deleteUser" title="Delete user"><i class="fa fa-trash-o text-navy"></i></a>
                                                                </td>
                                                            </tr>
                                                        </tbody>
                                                        <tfoot>
                                                            <tr>
                                                                <th style="width: 10px">#</th>
                                                                <th>Username</th>
                                                                <th>Email</th>
                                                                <th>First name</th>
                                                                <th>Last name</th>
                                                                <th>Job title</th>
                                                                <th>Roles</th>
                                                                <th>Enabled</th>
                                                                <th></th>
                                                            </tr>
                                                        </tfoot>
                                                    </table>
                                                </div>
                                            </div>
                                            <div class="ibox-footer">
                                                <div class="pull-right">
                                                    <ul class="pagination pagination-sm no-margin">
                                                        <li><a href="#" data-bind="click: $root.previousPage, css: {'disabled': $root.pageIndex() <= 0}">«</a></li>
                                                    </ul>
                                                    <ul class="pagination pagination-sm no-margin" data-bind="foreach: new Array($root.maxPageIndex() + 1)">
                                                        <li data-bind="css: {'active': $index() == $root.pageIndex() }">
                                                            <a href="#" data-bind="text: $index() + 1, click: $root.gotoPage.bind($data, $index())">0</a>
                                                        </li>
                                                    </ul>
                                                    <ul class="pagination pagination-sm no-margin">
                                                        <li><a href="#" data-bind="click: $root.nextPage, css: {'disabled': $root.pageIndex() >= $root.maxPageIndex()}">»</a></li>
                                                    </ul>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                                <div id="tab-2" class="tab-pane" data-bind="pageContextMenu">
                                    <div class="panel-body">
                                        <div class="row" style="margin-bottom: 15px; padding-right: 15px;">
                                            <button type="button" data-bind="click: $root.addNewUserTrigger.bind($data, true)" class="btn btn-primary pull-right">Add user</button>
                                        </div>
                                        <div data-bind="foreach: $root.userDisplayMatrix">
                                            <div id="content" class="row" data-bind="foreach: $data">
                                                <div class="col-lg-4">
                                                    <div class="contact-box" data-bind="userContextMenu: $data">
                                                        <a data-bind="attr: { href: '/user/' + $data.username() }">
                                                            <div class="col-sm-4">
                                                                <div class="text-center" style="word-wrap: break-word;">
                                                                    <img alt="image" class="img-circle m-t-xs img-responsive" src="/img/a6.jpg">
                                                                    <p class="m-t-xs font-bold" data-bind="html: $data.jobTitle"></p>
                                                                </div>
                                                            </div>
                                                            <div class="col-sm-8">
                                                                <h3><strong data-bind="html: $data.fullName()"></strong></h3>
                                                                <p><i class="fa fa-user-o"></i> <span data-bind="html: $data.username"></span></p>
                                                                <p><i class="fa fa-at"></i> <span data-bind="html: $data.email"></span></p>
                                                                <p data-bind="visible: ($data.roles().length > 0) ? true : false">
                                                                    <span data-bind="foreach: $data.roles">
                                                                    <span class="badge badge-primary" data-bind="html: $data"></span>
                                                                    </span>
                                                                </p>
                                                            </div>
                                                            <div class="clearfix"></div>
                                                        </a>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

            </div>

            <div id="user-modal" class="modal inmodal" tabindex="-1" role="dialog" aria-hidden="true">
                <div data-bind="with: ($root.editingUser()) ? $root.selectedUser : $root.newUser" class="modal-dialog" style="width: 60vw;">
                    <div class="modal-content animated bounceInRight">
                        <div class="modal-header">
                            <button data-bind="click: $root.clearUpdateModal, disable: $root.disableModalClose" type="button" class="close" data-dismiss="modal"
                                aria-label="Close">
						        <span aria-hidden="true">×</span>
                            </button>
                            <h4 class="modal-title" data-bind="html: ($data.fullName()) ? 'User : ' + $data.fullName() : 'Please enter first and last name'"></h4>
                        </div>
                        <div class="modal-body">
                            <div class="row">
                                <div class="col-xs-5" data-bind="visible: $root.viewEditorUserInfo">
                                    <div class="ibox float-e-margins">
                                        <div class="ibox-title">
                                            <h5>User Detail</h5>
                                        </div>
                                        <div>
                                            <div class="ibox-content no-padding border-left-right">
                                                <img alt="image" class="img-responsive" src="/img/profile_big.jpg">
                                            </div>
                                            <div class="ibox-content profile-content">
                                                <h4><strong data-bind="$data.fullName()"></strong></h4>
                                                <span><b>Created at</b></span>
                                                <p data-bind="html: $data.createdDate"></p>
                                                <span><b>Username</b></span>
                                                <p data-bind="html: $data.username"></p>
                                                <span><b>Email</b></span>
                                                <p data-bind="html: $data.email"></p>
                                                <span><b>Enabled</b></span>
                                                <p data-bind="html: $data.enabled"></p>
                                                <span><b>Roles</b></span>
                                                <p data-bind="foreach: $data.roles">
                                                    <span class="badge badge-primary" data-bind="html: $data"></span>
                                                </p>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                                <div data-bind="attr: { class: ($root.viewEditorUserInfo()) ? 'col-xs-7' : 'col-xs-12' }">
                                    <form id="user-modal-form" data-bind="validate">
                                        <div class="form-group">
                                            <label for="username" class="control-label">Username</label>
                                            <input name="username" class="form-control" data-bind="value: $data.username" />
                                            <label for="email" class="control-label">Email</label>
                                            <div class="input-group">
                                                <input type="text" name="email" data-bind="value: $data.email" class="form-control" />
                                                <span class="input-group-addon" data-toggle="tooltip" data-placement="left" data-html="true" title="Modifying user email will cause re-verification of account."><i class="fa fa-question-circle"></i></span>
                                            </div>
                                            <label for="firstname" class="control-label">First name</label>
                                            <input name="firstname" class="form-control" data-bind="value: $data.firstName" />
                                            <label for="lastname" class="control-label">Last name</label>
                                            <input name="lastname" class="form-control" data-bind="value: $data.lastName" />
                                            <label for="jobtitle" class="control-label">Job title</label>
                                            <input name="jobtitle" class="form-control" data-bind="value: $data.jobTitle" />
                                            <label for="roles" class="control-label">Available Roles</label>
                                            <div name="roles" class="input-group">
                                                <select name="roles" class="form-control" data-bind="options: $data.availableRoles, optionsText: 'name', value: $root.selectedRole"></select>
                                                <span class="input-group-btn">
                                                    <button type="button" class="btn btn-info btn-flat" data-bind="click: $data.addRole, enable: $data.rolesAddButton">Add</button>
                                                </span>
                                            </div>
                                            <label for="userroles" class="control-label">Roles</label>
                                            <div name="userroles" data-bind="foreach: $data.displayedRoles">
                                                <span class="label label-primary" data-bind="html: $data.name + '&nbsp;&nbsp;<i class=\'fa fa-times\'></i>', click: $parent.removeRole.bind($data, $data.value)"></span>
                                            </div>
                                        </div>
                                    </form>
                                </div>
                            </div>
                        </div>
                        <div class="modal-footer">
                            <button type="button" class="btn btn-default" data-dismiss="modal" data-bind="click: $root.clearUpdateModal, disable: $root.disableModalClose">Close</button>
                            <button type="submit" class="btnwizard btn btn-primary" data-bind="html: $root.submitModalHtml, click: ($root.editingUser()) ? $data.saveUserData : $data.saveNewUser, disable: $root.disableModalClose"></button>
                        </div>
                    </div>
                </div>
            </div>

            <ul id="userContextMenu" class="dropdown-menu" role="menu" style="display: none;z-index: 9999 !important;">
                <li data-toggle="modal" data-target="#user-modal"><a tabindex="-1" href="#"><i class="fa fa-edit"></i>&nbsp;&nbsp;&nbsp;Edit</a></li>
                <li data-toggle="modal" data-bind="click: $root.addNewUserTrigger.bind($data, true)"><a tabindex="-1" href="#"><i class="fa fa-plus"></i>&nbsp;&nbsp;&nbsp;Add</a></li>
                <li data-toggle="modal" data-bind="click: $root.deleteUser"><a tabindex="-1" href="#"><i class="fa fa-times"></i>&nbsp;&nbsp;&nbsp;Delete</a></li>
            </ul>
            <ul id="pageContextMenu" class="dropdown-menu" role="menu" style="display: none;z-index: 9999 !important;">
                <li data-toggle="modal" data-bind="click: $root.addNewUserTrigger.bind($data, false)"><a tabindex="-1" href="#"><i class="fa fa-plus"></i>&nbsp;&nbsp;&nbsp;Add</a></li>
            </ul>

            <% include ../partials/content/indexchat %>
                <% include ../partials/shared/rightsidebar %>

    </div>
    <!-- Page View Model -->
    <script type="text/javascript">
        $.validator.addMethod("regex", function (value, element, regexpr) {
            return regexpr.test(value);
        }, "Please provide a valid format.");

        function UserManagementViewModel() {
            var root = this;

            // Toastr
            function toastrTrigger(message, title, type) {
                setTimeout(function () {
                    toastr.options = {
                        closeButton: true,
                        progressBar: true,
                        showMethod: 'slideDown',
                        timeOut: 4000
                    };
                    toastr[type || "success"](message, title || 'Invite Users');
                }, 500);
            }

            // USER MODAL CONTROLS
            root.toggleModal = function () {
                // show/hide modal
                $('#user-modal').modal('toggle');
            };
            root.editingUser = ko.observable(false); // trigger modal bindng content
            root.viewEditorUserInfo = ko.observable(false);
            root.disableModalClose = ko.observable(false); // disable closing of modal
            root.submitModalHtml = ko.observable(); // modal submit html content
            root.addNewUserTrigger = function (param) {
                // trigger modal to display add user interface
                root.viewEditorUserInfo(param);
                root.newUser(new User());
                root.editingUser(false);
                root.submitModalHtml('Save');
                root.toggleModal();
            };

            // ROLES
            root.roles = ko.observableArray([]);
            if (<%= user.isSuper %>) {
                root.roles.push({ name: 'Superuser', value: 'super' });
            }
            root.roles.push({ name: 'Administrator', value: 'admin' });

            // selected role used in editing
            root.selectedRole = ko.observable();
            // fetch available roles from projects
            $.ajax({
                type: 'GET',
                url: `/api/projects`,
                success: function (result) {
                    result.forEach(function (project) {
                        root.roles.push({ name: project.name, value: project.projectKey });
                    });
                }
            });

            // USER DISPLAY
            root.users = ko.observableArray();
            root.userDisplayMatrix = ko.computed(function () {
                var matrix = [], i, k;

                for (var i = 0, k = -1; i < root.users().length; i++) {
                    if (i % 3 === 0) {
                        k++;
                        matrix[k] = [];
                    }

                    matrix[k].push(root.users()[i]);
                }
                return matrix;
            });
            root.pageSize = ko.observable(6);
            root.pageIndex = ko.observable(0);
            root.previousPage = function () {
                if (root.pageIndex() > 0) {
                    root.pageIndex(root.pageIndex() - 1);
                }
            };
            root.nextPage = function () {
                if (root.pageIndex() >= 0 && root.pageIndex() < root.maxPageIndex()) {
                    root.pageIndex(root.pageIndex() + 1);
                }
            };
            root.gotoPage = function (data) {
                if (data == root.maxPageIndex())
                    loadMoreUser();

                root.pageIndex(data);
            };
            root.maxPageIndex = ko.computed(function () {
                return Math.ceil(root.users().length / this.pageSize() - 1) + 1
            }, root);
            root.pagedUsers = ko.computed(function () {
                var size = root.pageSize();
                var start = root.pageIndex() * size;
                return root.users.slice(start, start + size);
            }, root);

            // USER EDIT/CREATE VARIABLES
            root.newUser = ko.observable(new User()); // empty user for creation
            root.selectedUser = ko.observable(); // selected user for editing
            root.selectUser = function (id) {
                root.editingUser(true);
                root.viewEditorUserInfo(false);
                root.submitModalHtml('Save');
                root.selectedUser(root.users().filter(_ => _._id() == id())[0]);
            };
            root.deleteUser = function () {
                // trigger delete user
                root.selectedUser().deleteUser();
            };

            // USER MODEL
            function User(user) {
                var _this = this;

                // initialize properties from user or undefined
                _this._id = ko.observable((user) ? user._id : undefined);
                _this.createdDate = ko.observable((user) ? user.createdDate : undefined);
                _this.username = ko.observable((user) ? user.username : undefined);
                _this.email = ko.observable((user) ? user.email : undefined);
                _this.firstName = ko.observable((user) ? user.firstName : undefined);
                _this.lastName = ko.observable((user) ? user.lastName : undefined);
                _this.jobTitle = ko.observable((user) ? user.jobTitle : undefined);
                _this.enabled = ko.observable((user) ? user.enabled : false);
                _this.availableRoles = ko.observableArray(root.roles.slice(0));
                _this.displayedRoles = ko.observableArray(); // displayed roles in modal
                _this.roles = ko.observableArray();
                _this.roles.subscribe(function (changes) {
                    // if roles array changed
                    var change = changes[0]; // get changes ifo
                    if (change.status == 'added') { // if changes is addition
                        _this.availableRoles.remove(root.roles().filter(_ => _.value == change.value)[0]); // add role to displayedroles
                        _this.displayedRoles.push(root.roles().filter(_ => _.value == change.value)[0]); // add role to displayedroles
                    } else if (change.status == 'deleted') { // if changes is deletion
                        _this.displayedRoles.remove(root.roles().filter(_ => _.value == change.value)[0]); // delete role from displayedroles
                        _this.availableRoles.push(root.roles().filter(_ => _.value == change.value)[0]); // add role to displayedroles
                    }
                }, null, 'arrayChange');
                _this.rolesAddButton = ko.computed(function () {
                    return _this.availableRoles().length > 0;
                });
                // initialize roles from array of user roles
                if (user) {
                    if (user.roles) {
                        user.roles.forEach(function (role) {
                            _this.roles.push(role);
                        });
                    }
                };

                // combines first and last name
                _this.fullName = ko.computed(function () {
                    if (!_this.firstName() && !_this.lastName())
                        return undefined;

                    return `${_this.firstName() || ''} ${_this.lastName() || ''}`
                });

                // model functions
                // add role to itself - get selectedrole from viewmodel
                _this.addRole = function () {
                    if (!_this.roles().includes(root.selectedRole().value))
                        _this.roles.push(root.selectedRole().value);
                };

                // remove role from itself
                _this.removeRole = function (role) {
                    _this.roles.remove(role);
                };

                // save this new user
                _this.saveNewUser = function () {
                    if ($('#user-modal-form').valid()) {
                        root.submitModalHtml('<i class="fa fa-spinner fa-pulse"></i>'); // change submit button html content
                        root.disableModalClose(true); // disable closing of modal
                        var user = JSON.parse(ko.toJSON(_this)); // convert knockout model to json object
                        $.ajax({ // post converted model to user creation api
                            type: 'POST',
                            url: '/api/user',
                            data: JSON.stringify(user),
                            contentType: 'application/json; charset=utf-8',
                            dataType: 'json',
                            success: function (result) {
                                if (result.success) {
                                    // if result returned successful
                                    _this._id(result.id); // put generate id to the model
                                    root.users.push(_this); // add model to displayed users
                                    toastrTrigger(result.message); // trigger snackbar
                                    root.newUser(new User()); // clean user data
                                    root.toggleModal(); // close modal
                                    root.disableModalClose(false); // enable closing of modal
                                } else {
                                    if (result.validation) {
                                        Object.keys(result.validation).forEach(function (key) {
                                            toastrTrigger(result.validation[key].message, undefined, 'error');
                                        });
                                    } else {
                                        toastrTrigger(result.message, undefined, 'error');
                                    }
                                    root.submitModalHtml('Save');
                                    root.disableModalClose(false); // enable closing of modal
                                }
                            }
                        });
                    }
                };

                // update this user
                _this.saveUserData = function () {
                    if ($('#user-modal-form').valid()) {
                        root.submitModalHtml('<i class="fa fa-spinner fa-pulse"></i>'); // change submit button html content
                        root.disableModalClose(true); // disable closing of modal
                        var user = JSON.parse(ko.toJSON(_this)); // convert knockout model to json object
                        $.ajax({ // put converted model to user update api
                            type: 'PUT',
                            url: `/api/user/${_this._id()}`,
                            data: JSON.stringify(user),
                            contentType: 'application/json; charset=utf-8',
                            dataType: 'json',
                            success: function (result) {
                                if (result.success) {
                                    // if result returned successful
                                    root.toggleModal(); // close modal
                                    toastrTrigger(result.message);
                                    root.disableModalClose(false); // enable closing of modal
                                } else {
                                    if (result.validation) {
                                        Object.keys(result.validation).forEach(function (key) {
                                            toastrTrigger(result.validation[key].message, undefined, 'error');
                                        });
                                    } else {
                                        toastrTrigger(result.message, undefined, 'error');
                                    }
                                    root.submitModalHtml('Save');
                                    root.disableModalClose(false); // enable closing of modal
                                }
                            }
                        });
                    }
                };


                // delete this user
                _this.deleteUser = function () {
                    $.ajax({
                        type: 'DELETE',
                        url: `/api/user/${_this._id()}`, // trigger user deletion api and pass userid
                        success: function (result) {
                            if (result.success) {
                                // if result returned successful
                                root.users.remove(_this); // remove user from displayed users
                                toastrTrigger(result.message); // trigger snackbar
                            } else {
                                toastrTrigger(result.message, undefined, 'error');
                            }
                        }
                    });
                }
            };

            // INITIALIZE USERS
            $.ajax({
                type: 'POST',
                url: '/api/users',
                data: JSON.stringify({ options: { limit: 6 } }),
                contentType: 'application/json; charset=utf-8',
                dataType: 'json',
                success: function (result) {
                    result.forEach(function (user) {
                        root.users.push(new User(user));
                    });
                }
            });

            $(document).ready(function () {
                if ($(window).height() >= $("body").height()) {
                    loadMoreUser();
                }
            });

            $(window).scroll(function () {
                if ($(window).scrollTop() == $(document).height() - $(window).height()) {
                    if ($('#tab-2').hasClass('active'))
                        loadMoreUser();
                }
            });

            ko.bindingHandlers.filterForm = {
                init: function (element, valueAccessor) {
                    root.clearFilterForm = function () {
                        while (root.filterRoles().length > 0) {
                            root.filterRoles.pop();
                        }
                        $(element).trigger('reset');
                        root.filterName(undefined);
                        root.filterEmail(undefined);
                        root.filterJobTitle(undefined);
                    };
                    root.submitFilterFormHTML = ko.observable('Search');
                    root.roles.subscribe(function () {
                        root.filterAvailableRoles(root.roles.slice(0));
                    });
                    root.filterSelectedRole = ko.observable();
                    root.filterAvailableRoles = ko.observableArray();
                    root.filterDisplayedRoles = ko.observableArray();
                    root.filterRoles = ko.observableArray();
                    root.filterRoles.subscribe(function (changes) {
                        // if roles array changed
                        var change = changes[0]; // get changes ifo
                        if (change.status == 'added') { // if changes is addition
                            root.filterAvailableRoles.remove(change.value); // add role to displayedroles
                            root.filterDisplayedRoles.push(change.value); // add role to displayedroles
                        } else if (change.status == 'deleted') { // if changes is deletion
                            root.filterDisplayedRoles.remove(change.value); // delete role from displayedroles
                            root.filterAvailableRoles.push(change.value); // add role to displayedroles
                        }
                    }, null, 'arrayChange');
                    root.filterIncludeRole = function () {
                        if (!root.filterRoles().includes(root.filterSelectedRole())) {
                            root.filterSelectedRole().include = true;
                            root.filterRoles.push(root.filterSelectedRole());
                        }
                    };
                    root.filterExcludeRole = function () {
                        if (!root.filterRoles().includes(root.filterSelectedRole())) {
                            root.filterSelectedRole().include = false;
                            root.filterRoles.push(root.filterSelectedRole());
                        }
                    };
                    root.filterRemoveRole = function (role) {
                        root.filterRoles.remove(_ => _.value == role);
                    };
                    root.filterRoleAddButton = ko.computed(function () {
                        return root.filterAvailableRoles().length > 0;
                    });
                    root.filterName = ko.observable();
                    root.filterEmail = ko.observable();
                    root.filterJobTitle = ko.observable();
                    root.filterQuery = ko.computed(function () {
                        var includedRoles = [];
                        var excludedRoles = [];
                        root.filterRoles().forEach(function (role) {
                            if (role.include)
                                includedRoles.push(role.value);
                            else if (!role.include)
                                excludedRoles.push(role.value);
                        });
                        var query = {
                            $or: (root.filterName() && root.filterName() != '') ? [
                                { firstName: { $regex: root.filterName(), $options: 'i' } },
                                { lastName: { $regex: root.filterName(), $options: 'i' } }
                            ] : undefined,
                            email: (root.filterEmail() && root.filterEmail() != '') ? { $regex: root.filterEmail(), $options: 'i' } : undefined,
                            jobTitle: (root.filterJobTitle() && root.filterJobTitle() != '') ? { $regex: root.filterJobTitle(), $options: 'i' } : undefined,
                            roles: (includedRoles.length > 0 || excludedRoles.length > 0) ? {
                                $in: (includedRoles.length > 0) ? includedRoles : undefined,
                                $nin: (excludedRoles.length > 0) ? excludedRoles : undefined
                            } : undefined
                        }
                        return JSON.parse(JSON.stringify(query));
                    });
                    $(element).submit(function (e) {
                        e.preventDefault();
                        root.submitFilterFormHTML('<i class="fa fa-spinner fa-pulse"></i>');
                        $.ajax({
                            type: 'POST',
                            url: '/api/users',
                            data: JSON.stringify({ query: root.filterQuery() }),
                            contentType: 'application/json; charset=utf-8',
                            dataType: 'json',
                            success: function (result) {
                                root.users([]);
                                if (result.length > 0) {
                                    result.forEach(function (user) {
                                        root.users.push(new User(user));
                                    });
                                }
                                root.submitFilterFormHTML('Search');
                            }
                        });
                    });
                }
            };

            var loadMoreUser = function () {
                $.ajax({
                    type: 'POST',
                    url: '/api/users',
                    data: JSON.stringify({ query: root.filterQuery(), options: { limit: 6, skip: root.users().length } }),
                    contentType: 'application/json; charset=utf-8',
                    dataType: 'json',
                    success: function (result) {
                        result.forEach(function (user) {
                            root.users.push(new User(user));
                        });
                    }
                });
            };

            ko.bindingHandlers.validate = {
                init: function (element, valueAccessor) {
                    $(element).validate({
                        errorClass: 'error jquery-invalid',
                        rules: {
                            username: {
                                required: true,
                                minlength: 8,
                                maxlength: 15
                            },
                            email: {
                                required: true,
                                regex: /^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@cambridge.org$/
                            },
                            firstname: {
                                required: true
                            },
                            lastname: {
                                required: true
                            }
                        },
                        messages: {
                            email: {
                                regex: 'Please provide a Cambridge email.'
                            }
                        }
                    })
                }
            };

            // CONTEXT MENU
            ko.bindingHandlers.userContextMenu = {
                init: function (element, valueAccessor) {
                    // Open context menu
                    $(element).on("contextmenu", function (e) {
                        // return native menu if pressing control
                        if (e.ctrlKey) return;

                        $('#pageContextMenu').hide();

                        root.editingUser(true);
                        root.viewEditorUserInfo(true);
                        root.submitModalHtml('Save');
                        root.selectedUser(root.users().filter(_ => _._id() == valueAccessor()._id())[0]);

                        //open menu
                        var $menu = $('#userContextMenu')
                            .data("invokedOn", $(e.target))
                            .show()
                            .css({
                                position: "absolute",
                                left: getMenuPosition(e.clientX, 'width', 'scrollLeft'),
                                top: getMenuPosition(e.clientY, 'height', 'scrollTop')
                            })
                            .off('click')
                            .on('click', 'li', function (e) {
                                /*if(e.target.getAttribute('data-submenu') == null) {
                                    $menu.hide();
                                } else {
                                    $menu.hide();
                                } */
                                $menu.hide();
                            });

                        function getMenuPosition(mouse, direction, scrollDir) {
                            var win = $(window)[direction](),
                                scroll = $(window)[scrollDir](),
                                menu = $('#userContextMenu')[direction](),
                                position = mouse + scroll;

                            // opening menu would pass the side of the page
                            if (mouse + menu > win && menu < mouse)
                                position -= menu;

                            return position;
                        };

                        return false;
                    });

                    //make sure menu closes on any click
                    $('body').click(function () {
                        $('#userContextMenu').hide();
                    });
                }
            };

            ko.bindingHandlers.pageContextMenu = {
                init: function (element, valueAccessor) {
                    // Open context menu
                    $(element).on("contextmenu", function (e) {
                        // return native menu if pressing control
                        if (e.ctrlKey) return;

                        $('#userContextMenu').hide();

                        //open menu
                        var $menu = $('#pageContextMenu')
                            .data("invokedOn", $(e.target))
                            .show()
                            .css({
                                position: "absolute",
                                left: getMenuPosition(e.clientX, 'width', 'scrollLeft'),
                                top: getMenuPosition(e.clientY, 'height', 'scrollTop')
                            })
                            .off('click')
                            .on('click', 'li', function (e) {
                                /*if(e.target.getAttribute('data-submenu') == null) {
                                    $menu.hide();
                                } else {
                                    $menu.hide();
                                } */
                                $menu.hide();
                            });

                        function getMenuPosition(mouse, direction, scrollDir) {
                            var win = $(window)[direction](),
                                scroll = $(window)[scrollDir](),
                                menu = $('#pageContextMenu')[direction](),
                                position = mouse + scroll;

                            // opening menu would pass the side of the page
                            if (mouse + menu > win && menu < mouse)
                                position -= menu;

                            return position;
                        };

                        return false;
                    });

                    //make sure menu closes on any click
                    $('body').click(function () {
                        $('#pageContextMenu').hide();
                    });
                }
            };

        };

        ko.applyBindings(new UserManagementViewModel());
    </script>

    <% include ../partials/shared/trellomodal %>
        <% include ../partials/shared/trelloscripts %>
            <% include ../partials/shared/scripts %>
</body>

</html>